// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscribe.proto

package iproto

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// protoc -Iiproto --go_out=plugins=grpc:./iproto ./iproto/subscribe.proto
type SubscribeRequest struct {
	// 需要订阅的协议ID
	CmdIds []uint32 `protobuf:"varint,1,rep,packed,name=cmdIds,proto3" json:"cmdIds,omitempty"`
	// 订阅者的服务名
	ConsumerKey string `protobuf:"bytes,2,opt,name=consumerKey,proto3" json:"consumerKey,omitempty"`
	// true：订阅，false:取消订阅
	Act bool `protobuf:"varint,3,opt,name=act,proto3" json:"act,omitempty"`
	// 服务名
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	// 消费者rpc接收通知地址
	RpcAddr              string   `protobuf:"bytes,5,opt,name=rpcAddr,proto3" json:"rpcAddr,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeRequest) Reset()         { *m = SubscribeRequest{} }
func (m *SubscribeRequest) String() string { return proto.CompactTextString(m) }
func (*SubscribeRequest) ProtoMessage()    {}
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{0}
}

func (m *SubscribeRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeRequest.Unmarshal(m, b)
}
func (m *SubscribeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeRequest.Marshal(b, m, deterministic)
}
func (m *SubscribeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeRequest.Merge(m, src)
}
func (m *SubscribeRequest) XXX_Size() int {
	return xxx_messageInfo_SubscribeRequest.Size(m)
}
func (m *SubscribeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeRequest proto.InternalMessageInfo

func (m *SubscribeRequest) GetCmdIds() []uint32 {
	if m != nil {
		return m.CmdIds
	}
	return nil
}

func (m *SubscribeRequest) GetConsumerKey() string {
	if m != nil {
		return m.ConsumerKey
	}
	return ""
}

func (m *SubscribeRequest) GetAct() bool {
	if m != nil {
		return m.Act
	}
	return false
}

func (m *SubscribeRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SubscribeRequest) GetRpcAddr() string {
	if m != nil {
		return m.RpcAddr
	}
	return ""
}

type SubscribeReply struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SubscribeReply) Reset()         { *m = SubscribeReply{} }
func (m *SubscribeReply) String() string { return proto.CompactTextString(m) }
func (*SubscribeReply) ProtoMessage()    {}
func (*SubscribeReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{1}
}

func (m *SubscribeReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SubscribeReply.Unmarshal(m, b)
}
func (m *SubscribeReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SubscribeReply.Marshal(b, m, deterministic)
}
func (m *SubscribeReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SubscribeReply.Merge(m, src)
}
func (m *SubscribeReply) XXX_Size() int {
	return xxx_messageInfo_SubscribeReply.Size(m)
}
func (m *SubscribeReply) XXX_DiscardUnknown() {
	xxx_messageInfo_SubscribeReply.DiscardUnknown(m)
}

var xxx_messageInfo_SubscribeReply proto.InternalMessageInfo

func (m *SubscribeReply) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *SubscribeReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type ProduceRequest struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceRequest) Reset()         { *m = ProduceRequest{} }
func (m *ProduceRequest) String() string { return proto.CompactTextString(m) }
func (*ProduceRequest) ProtoMessage()    {}
func (*ProduceRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{2}
}

func (m *ProduceRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceRequest.Unmarshal(m, b)
}
func (m *ProduceRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceRequest.Marshal(b, m, deterministic)
}
func (m *ProduceRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceRequest.Merge(m, src)
}
func (m *ProduceRequest) XXX_Size() int {
	return xxx_messageInfo_ProduceRequest.Size(m)
}
func (m *ProduceRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceRequest proto.InternalMessageInfo

func (m *ProduceRequest) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

type ProduceReply struct {
	Code                 uint32   `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Msg                  string   `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ProduceReply) Reset()         { *m = ProduceReply{} }
func (m *ProduceReply) String() string { return proto.CompactTextString(m) }
func (*ProduceReply) ProtoMessage()    {}
func (*ProduceReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_38d2980c9543da44, []int{3}
}

func (m *ProduceReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ProduceReply.Unmarshal(m, b)
}
func (m *ProduceReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ProduceReply.Marshal(b, m, deterministic)
}
func (m *ProduceReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProduceReply.Merge(m, src)
}
func (m *ProduceReply) XXX_Size() int {
	return xxx_messageInfo_ProduceReply.Size(m)
}
func (m *ProduceReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ProduceReply.DiscardUnknown(m)
}

var xxx_messageInfo_ProduceReply proto.InternalMessageInfo

func (m *ProduceReply) GetCode() uint32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *ProduceReply) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func init() {
	proto.RegisterType((*SubscribeRequest)(nil), "iproto.subscribeRequest")
	proto.RegisterType((*SubscribeReply)(nil), "iproto.subscribeReply")
	proto.RegisterType((*ProduceRequest)(nil), "iproto.produceRequest")
	proto.RegisterType((*ProduceReply)(nil), "iproto.produceReply")
}

func init() { proto.RegisterFile("subscribe.proto", fileDescriptor_38d2980c9543da44) }

var fileDescriptor_38d2980c9543da44 = []byte{
	// 266 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x50, 0x3d, 0x4f, 0xc3, 0x30,
	0x10, 0xc5, 0x24, 0xa4, 0xf4, 0x48, 0x4b, 0x75, 0x42, 0x95, 0xd5, 0xc9, 0xb2, 0x18, 0x32, 0x65,
	0x00, 0x84, 0xc4, 0x84, 0x18, 0x11, 0x9b, 0xfb, 0x0b, 0x12, 0xdb, 0x42, 0x95, 0x9a, 0xda, 0xd8,
	0x09, 0x52, 0xfe, 0x02, 0xe2, 0x47, 0xa3, 0x98, 0xd4, 0x2a, 0x1f, 0x43, 0x27, 0xbf, 0x7b, 0xf7,
	0x9e, 0xef, 0xdd, 0xc1, 0xa5, 0xef, 0x6a, 0x2f, 0xdd, 0xa6, 0xd6, 0xa5, 0x75, 0xa6, 0x35, 0x98,
	0x6d, 0xc2, 0xcb, 0x3f, 0x09, 0x2c, 0x62, 0x4f, 0xe8, 0xb7, 0x4e, 0xfb, 0x16, 0x97, 0x90, 0xc9,
	0x46, 0x3d, 0x2b, 0x4f, 0x09, 0x4b, 0x8a, 0x99, 0x18, 0x2b, 0x64, 0x70, 0x21, 0xcd, 0xce, 0x77,
	0x8d, 0x76, 0x2f, 0xba, 0xa7, 0xa7, 0x8c, 0x14, 0x53, 0x71, 0x48, 0xe1, 0x02, 0x92, 0x4a, 0xb6,
	0x34, 0x61, 0xa4, 0x38, 0x17, 0x03, 0x44, 0x84, 0x74, 0x57, 0x35, 0x9a, 0xa6, 0x41, 0x1c, 0x30,
	0x52, 0x98, 0x38, 0x2b, 0x9f, 0x94, 0x72, 0xf4, 0x2c, 0xd0, 0xfb, 0x92, 0xdf, 0xc3, 0xfc, 0x20,
	0x8d, 0xdd, 0xf6, 0x83, 0x5f, 0x1a, 0xa5, 0x29, 0x61, 0xa4, 0x98, 0x89, 0x80, 0x87, 0x29, 0x8d,
	0x7f, 0x1d, 0xe7, 0x0f, 0x90, 0x5f, 0xc3, 0xdc, 0x3a, 0xa3, 0x3a, 0x19, 0x77, 0x40, 0x48, 0x55,
	0xd5, 0x56, 0xc1, 0x97, 0x8b, 0x80, 0xf9, 0x1d, 0xe4, 0x51, 0x75, 0xf4, 0xdf, 0x37, 0x1f, 0x04,
	0xf2, 0xf5, 0x3e, 0xd4, 0xfa, 0xdd, 0xe1, 0x23, 0x4c, 0x63, 0x48, 0xa4, 0xe5, 0xf7, 0x25, 0xcb,
	0xdf, 0x57, 0x5c, 0x2d, 0xff, 0xe9, 0xd8, 0x6d, 0xcf, 0x4f, 0xf0, 0x01, 0x26, 0x63, 0x0e, 0x8c,
	0xa2, 0x9f, 0xf1, 0x57, 0x57, 0x7f, 0xf8, 0x60, 0xad, 0xb3, 0xc0, 0xde, 0x7e, 0x05, 0x00, 0x00,
	0xff, 0xff, 0x6e, 0x01, 0xd1, 0xc9, 0xd1, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SubscribeSvrClient is the client API for SubscribeSvr service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SubscribeSvrClient interface {
	// 订阅需要的协议ID
	Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error)
	// 向集群发送生产出来的消息
	Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceReply, error)
}

type subscribeSvrClient struct {
	cc *grpc.ClientConn
}

func NewSubscribeSvrClient(cc *grpc.ClientConn) SubscribeSvrClient {
	return &subscribeSvrClient{cc}
}

func (c *subscribeSvrClient) Subscribe(ctx context.Context, in *SubscribeRequest, opts ...grpc.CallOption) (*SubscribeReply, error) {
	out := new(SubscribeReply)
	err := c.cc.Invoke(ctx, "/iproto.SubscribeSvr/subscribe", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *subscribeSvrClient) Produce(ctx context.Context, in *ProduceRequest, opts ...grpc.CallOption) (*ProduceReply, error) {
	out := new(ProduceReply)
	err := c.cc.Invoke(ctx, "/iproto.SubscribeSvr/produce", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SubscribeSvrServer is the server API for SubscribeSvr service.
type SubscribeSvrServer interface {
	// 订阅需要的协议ID
	Subscribe(context.Context, *SubscribeRequest) (*SubscribeReply, error)
	// 向集群发送生产出来的消息
	Produce(context.Context, *ProduceRequest) (*ProduceReply, error)
}

// UnimplementedSubscribeSvrServer can be embedded to have forward compatible implementations.
type UnimplementedSubscribeSvrServer struct {
}

func (*UnimplementedSubscribeSvrServer) Subscribe(ctx context.Context, req *SubscribeRequest) (*SubscribeReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Subscribe not implemented")
}
func (*UnimplementedSubscribeSvrServer) Produce(ctx context.Context, req *ProduceRequest) (*ProduceReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Produce not implemented")
}

func RegisterSubscribeSvrServer(s *grpc.Server, srv SubscribeSvrServer) {
	s.RegisterService(&_SubscribeSvr_serviceDesc, srv)
}

func _SubscribeSvr_Subscribe_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubscribeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeSvrServer).Subscribe(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.SubscribeSvr/Subscribe",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeSvrServer).Subscribe(ctx, req.(*SubscribeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SubscribeSvr_Produce_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProduceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SubscribeSvrServer).Produce(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/iproto.SubscribeSvr/Produce",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SubscribeSvrServer).Produce(ctx, req.(*ProduceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _SubscribeSvr_serviceDesc = grpc.ServiceDesc{
	ServiceName: "iproto.SubscribeSvr",
	HandlerType: (*SubscribeSvrServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "subscribe",
			Handler:    _SubscribeSvr_Subscribe_Handler,
		},
		{
			MethodName: "produce",
			Handler:    _SubscribeSvr_Produce_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "subscribe.proto",
}
